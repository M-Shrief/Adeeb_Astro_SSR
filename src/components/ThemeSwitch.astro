---
// UI
import { themes } from "../i18n/themes";
import { languages } from "../i18n/langs";

interface Props {
  // Used to make the current local a selected option
  currentLocale: keyof typeof languages;
}

const { currentLocale } = Astro.props;
---

<select id="theme-selector" class="theme-selector" aria-label="Theme Selector">
  {
    Object.entries(themes[currentLocale]).map(([theme, themeLabel]) => (
      <option value={theme}>{themeLabel}</option>
    ))
  }
</select>

<script>
  //  Inspired by https://web.dev/patterns/theming/
  const storageKey = "theme-preference";

  const onClick = (ev: Event) => {
    theme.value = (ev.target as HTMLSelectElement).value;
    setPreference();
  };

  const getColorPreference = () => {
    if (localStorage.getItem(storageKey))
      return localStorage.getItem(storageKey);
    else return "dark";
  };

  const setPreference = () => {
    localStorage.setItem(storageKey, theme.value as string);
    reflectPreference();
  };

  const reflectPreference = () => {
    document.firstElementChild?.setAttribute(
      "color-scheme",
      theme.value as string,
    );

    document
      .querySelectorAll(`.theme-selector option[value='${theme.value}']`)
      .forEach(node => {
        node.setAttribute("selected", "");
      })
      

    // document
    //   .querySelectorAll(".theme-selector")
    //   .forEach(node => {
    //     node.setAttribute("aria-label", theme.value as string);
    //   })
      
  };

  const theme = {
    value: getColorPreference(),
  };

  // set early so no page flashes / CSS is made aware
  reflectPreference();

  // ReflectPrefernce, and addEventListener on first page load
  window.onload = () => {
    // set on load so screen readers can see latest value on the button
    reflectPreference();

    // now this script can find and listen for clicks on the control
    document
      .querySelectorAll(".theme-selector")
      .forEach(node => {
        node.addEventListener("click", onClick);
      })  
  };

  // ReflectPrefernce, and addEventListener on ViewTransition
  document.addEventListener("astro:page-load", () => {
    // set on load so screen readers can see latest value on the button
    reflectPreference();
    // now this script can find and listen for clicks on the control
    document
      .querySelectorAll(".theme-selector")
      .forEach(node => {
        node.addEventListener("click", onClick);
      })
  });

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      theme.value = isDark ? "dark" : "light";
      setPreference();
    });
</script>

<style lang="scss">
  @import "../assets/mixins.scss";

  .theme-selector {
    color: rgba($color: #FBE6C2, $alpha: 0.8);
    background-color: transparent;
    border: none;
    padding: 0.1rem 0.3rem 0.3rem;
    margin: 0.2rem;
    cursor: pointer;
    text-decoration: none;
    font-size: 1.2rem;
    opacity: 0.8;
    &:hover {
      opacity: 1;
    }
    @include mQ($breakpoint-sm) {
      font-size: 0.75rem;
    }
    option {
      background-color: #1f2124;
    }
  }
</style>
